<?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    ">
     <!-- Realm实现 -->
	 <bean id="myRealm" class="com.soulcoder.partener.shiro.CustomRealm">
	   <!--  <property name="credentialsMatcher" ref="credentialsMatcher"/> -->  
        <property name="cachingEnabled" value="false"/>  
	 </bean>

	<!-- 定义缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />

	<!--session管理器-->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="600000"/>
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true"/>
	</bean>

	<!-- 安全管理器-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	    <property name="realm" ref="myRealm"/>
		<!-- 使用配置的缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"></property>
		<!-- 会话管理 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>




 <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<!-- Shiro的核心安全接口,这个属性是必须的 -->
	<property name="securityManager" ref="securityManager"/>
	<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
	<property name="loginUrl" value="/login"/>
	<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
	<property name="successUrl" value="/sys/index"/>
	<!-- 用户访问未对其授权的资源时,所显示的连接 -->
	<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
	<property name="unauthorizedUrl" value="/unauthor"/>
	<!-- Shiro连接约束配置,即过滤链的定义 -->
	<!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
	<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
	<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
	<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
	<property name="filterChainDefinitions">
		<value>
			/login=anon
			/sys**=anon
			<!--/admin/listUser**=authc,perms[admin:manage] authc-->
		</value>
	</property>
</bean>  
  
		  <!-- Shiro生命周期处理器 ，保证实现了Shiro内部lifecycle函数的bean执行-->
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	  </bean>
</beans>
